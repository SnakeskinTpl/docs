- namespace docs.ru.guide['2::Основы']['1::Декларация и базовый синтаксис']

/*!
 * snakeskin.github.io
 * https://github.com/SnakeskinTpl/snakeskin.github.io
 *
 * Released under the MIT license
 * https://github.com/SnakeskinTpl/snakeskin.github.io/blob/master/LICENSE
 */

- include '../../tpls/modules/base'

{template main[%fileName%]() extends base.main}
#{block root}

## Область декларации шаблонов

Шаблоны Snakeskin можно декларировать либо в отдельных файлах c расширением **.ss** (рекомендуемый способ),
либо внутри HTML документа через `<script>` блок, например:

```html
<!doctype html>
<html>
	<head>
		<title>Hello world!</title>
		<meta charset="utf-8">
	</head>

	<body>
		<script type="text/x-snakeskin-template">
			{namespace demo}

			{template index()}
				Hello World!
			{/template}

			{template calc(a, b)}
				a + b = {a + b}
			{/template}
		</script>
	</body>
</html>
```

В одной области декларации может быть объявлено неограниченное количество шаблонов.

## Синтаксис управляющих конструкций

Управляющие конструкции (директивы) Snakeskin размещаются между символами `{` и `}`.
Обычно вызов директивы подходит под следующий шаблон:

```classic
{названиеДирективы параметры}
```

Например:

```classic
{var a = true /}
{if a}
	{void console.log(a)}
{/}
```

Но некоторые директивы поддерживают альтернативный, более короткий синтаксис, например:

```classic
{void 1 + 2} \/* ↔ */ {? 1 + 2}
{output 1 + 2} \/* ↔ */ {1 + 2}
```

### Расширенный синтаксис

В случаях, когда в теле генерируемого шаблона необходимо также использовать фигурные скобки,
то используется специальных расширенный синтаксис декларации директив (символы `\#{` и `}`), например:

```classic
{template example()}
	{var val = 1 /}

	\#{block script}
		<script>
			var a = {
				val: \#{val}
			};
		</script>
	\#{/}
{/template}
```

Все директивы, которые вложены в директиву с расширенным синтаксисом, должны также использовать этот синтаксис.

## Блочные директивы

Подобно тегам HTML или XML, многие директивы Snakeskin могут включать в себя другие директивы и т.д. и в дальнейшем
такие директивы будут называться блочными, а все остальные - строчными.

Блочные директивы состоят из двух частей: основной декларации и завершающей части, например:

```classic
\/// Основная декларация директивы if
{if 1 > 2}
	...
\/// Завершающая часть
{/}
```

Завершающая часть, как правило, создаётся с помощью специальной директивы [end](api.html#end),
которая поддерживает несколько видов синтаксиса:

```classic
\/// Полная форма
{if 1 > 2}
	...
{end if}

\/// Сокращённая форма
{if 1 > 2}
	...
{end}

\/// Альтернативная полная форма
{if 1 > 2}
	...
{/if}

\/// Альтернативная сокращённая форма
{if 1 > 2}
	...
{/}
```

Какую форму использовать решает сам разработчик, но следует отметить, что при использовании форм с указанием
имени закрываемой директивы Snakeskin будет проверять правильность, т.е.

```classic
{if 1 > 2}
	...
{/else} \/// Ошибка
```

## Комментарии

В любом месте области декларации шаблонов допускается использовать однострочные (`\///`) и многострочные (`\/* ... */`)
комментарии. Комментарии вырезаются на этапе трансляции и не попадают в скомпилированный JavaScript.

```classic
\/* ... */
\/// ...
{template index(name)}
	\///{name}
	\/*Hello
	World*/

	{1 \/*+ 2*/} \/// Выведет 1

	\/// \/* 1 */, т.к. внутри литералов строк и
	\/// регулярных выражений комментарии не действуют
	{'\/* 1 */'}

	\/* Для отмены нежелательного комментария его нужно экранировать */
	file:\\\///... \/// экранируем первый /, чтобы URL вывелся как надо

	\/// Пример ниже вызовет ошибку
	{\/*}*/
{/template}
```

### jsDoc

Snakeskin поддерживает jsDoc комментарии, которые не вырезаются из конечного JavaScript кода.

```classic
\/**
 * jsDoc комментарий
 * @param {string} name
 */
{template index(name)}
 \/*
  * Обычный комментарий
  */
{/template}
```

## Экранирование

Символ `\\` может использоваться для экранирования директив, комментариев и прочих сущностей Snakeskin.

```classic
{template example()}
	\\{var val = 1} \/// Выведется как простой текст
	\\\/// Выведется как простой текст
	\\1 \/// \1
{/template}
```

#{/block}
{/template}
